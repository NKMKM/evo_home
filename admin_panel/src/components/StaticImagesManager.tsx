import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Image as ImageIcon,  
  X, 
  RefreshCw,
  Eye,
  EyeOff,
  AlertCircle,
  CheckCircle,
  Download,
  Copy,
  Search,
  ExternalLink
} from 'lucide-react';

interface ImageData {
  id: number;
  src: string;
  alt: string;
  title: string;
  description: string;
  size?: string;
  exists?: boolean;
  url?: string;
}

interface StaticImagesManagerProps {
  pageId: string;
  pageTitle: string;
  onClose: () => void;
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü (–∫–æ–ø–∏—è –∏–∑ pages.json)
const PAGES_DATA = [
  {
    "id": "home",
    "title": "–ì–ª–∞–≤–Ω–∞—è",
    "url": "/",
    "images": [
      {
        "id": 1,
        "src": "images/design.jpg",
        "alt": "–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞",
        "title": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω",
        "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞"
      },
      {
        "id": 2,
        "src": "images/discount.jpg",
        "alt": "–°–∫–∏–¥–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç",
        "title": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "description": "–í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
      },
      {
        "id": 3,
        "src": "images/architector.jpg",
        "alt": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä",
        "title": "–ù–∞—à –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä",
        "description": "–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
      },
      {
        "id": 4,
        "src": "images/founder_main.png",
        "alt": "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏",
        "title": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
        "description": "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å EvoHome"
      },
      {
        "id": 5,
        "src": "images/home_start_bg.jpg",
        "alt": "–§–æ–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        "title": "–ì–ª–∞–≤–Ω—ã–π —Ñ–æ–Ω",
        "description": "–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
      },
      {
        "id": 6,
        "src": "images/calculator_bg_img.jpg",
        "alt": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–º–æ–Ω—Ç–∞",
        "title": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        "description": "–§–æ–Ω –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"
      },
      {
        "id": 7,
        "src": "images/reviews_bg.jpg",
        "alt": "–§–æ–Ω –æ—Ç–∑—ã–≤–æ–≤",
        "title": "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "description": "–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"
      },
      {
        "id": 8,
        "src": "images/review_form_bg.jpg",
        "alt": "–§–æ–Ω —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–∞",
        "title": "–§–æ—Ä–º–∞ –æ—Ç–∑—ã–≤–∞",
        "description": "–§–æ–Ω –¥–ª—è —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–∞"
      },
      {
        "id": 9,
        "src": "images/footer_bg.jpg",
        "alt": "–§–æ–Ω –ø–æ–¥–≤–∞–ª–∞",
        "title": "–ü–æ–¥–≤–∞–ª —Å–∞–π—Ç–∞",
        "description": "–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≤–∞–ª–∞"
      },
      {
        "id": 10,
        "src": "images/leftside_black_decoration.png",
        "alt": "–ß–µ—Ä–Ω–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ —Å–ª–µ–≤–∞",
        "title": "–î–µ–∫–æ—Ä–∞—Ü–∏—è",
        "description": "–õ–µ–≤–∞—è –¥–µ–∫–æ—Ä–∞—Ü–∏—è"
      },
      {
        "id": 11,
        "src": "images/leftside_yellow_decoration.png",
        "alt": "–ñ–µ–ª—Ç–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ —Å–ª–µ–≤–∞",
        "title": "–î–µ–∫–æ—Ä–∞—Ü–∏—è",
        "description": "–ñ–µ–ª—Ç–∞—è –ª–µ–≤–∞—è –¥–µ–∫–æ—Ä–∞—Ü–∏—è"
      },
      {
        "id": 12,
        "src": "images/rightside_black_decoration.png",
        "alt": "–ß–µ—Ä–Ω–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞",
        "title": "–î–µ–∫–æ—Ä–∞—Ü–∏—è",
        "description": "–ü—Ä–∞–≤–∞—è –¥–µ–∫–æ—Ä–∞—Ü–∏—è"
      },
      {
        "id": 13,
        "src": "images/rightside_yellow_decoration.png",
        "alt": "–ñ–µ–ª—Ç–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞",
        "title": "–î–µ–∫–æ—Ä–∞—Ü–∏—è",
        "description": "–ñ–µ–ª—Ç–∞—è –ø—Ä–∞–≤–∞—è –¥–µ–∫–æ—Ä–∞—Ü–∏—è"
      }
    ]
  },
  {
    "id": "about-us",
    "title": "–û –Ω–∞—Å",
    "url": "/about-us",
    "images": [
      {
        "id": 1,
        "src": "images/founder_main.png",
        "alt": "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏",
        "title": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
        "description": "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å EvoHome"
      },
      {
        "id": 2,
        "src": "images/team_images/team1.jpg",
        "alt": "–ß–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã 1",
        "title": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
        "description": "–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
      },
      {
        "id": 3,
        "src": "images/team_images/team2.jpg",
        "alt": "–ß–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã 2",
        "title": "–î–∏–∑–∞–π–Ω–µ—Ä",
        "description": "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä"
      },
      {
        "id": 4,
        "src": "images/about_us_achievments/achievement1.jpg",
        "alt": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 1",
        "title": "–ù–∞–≥—Ä–∞–¥–∞",
        "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"
      },
      {
        "id": 5,
        "src": "images/about_us_achievments/achievement2.jpg",
        "alt": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 2",
        "title": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
        "description": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞"
      }
    ]
  }
];

export function StaticImagesManager({ pageId, pageTitle, onClose }: StaticImagesManagerProps) {
  const [images, setImages] = useState<ImageData[]>([]);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedImages, setSelectedImages] = useState<Set<number>>(new Set());
  const [searchTerm, setSearchTerm] = useState('');
  const [imageErrors, setImageErrors] = useState<Set<string>>(new Set());

  const backendUrl = (import.meta as any).env?.VITE_BACKEND_URL || 'http://localhost:3001';

  useEffect(() => {
    loadImages();
  }, [pageId]);

  const loadImages = () => {
    try {
      setLoading(true);
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const page = PAGES_DATA.find(p => p.id === pageId);
      
      if (!page) {
        console.log(`‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö`);
        showMessage('error', `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }

      if (!page.images || page.images.length === 0) {
        console.log(`‚ö†Ô∏è –£ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        setImages([]);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const processedImages = page.images.map((img) => {
        const cleanSrc = img.src.startsWith('images/') ? img.src.substring(7) : img.src;
        return {
          ...img,
          src: cleanSrc,
          url: `${backendUrl}/images/${cleanSrc}`,
          exists: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
          size: 'Unknown' // –†–∞–∑–º–µ—Ä –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        };
      });

      setImages(processedImages);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      showMessage('error', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setLoading(false);
    }
  };

  const handleImageError = (imageSrc: string) => {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSrc}`);
    setImageErrors(prev => new Set([...prev, imageSrc]));
  };

  const handleImageLoad = (imageSrc: string) => {
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageSrc}`);
    setImageErrors(prev => {
      const newSet = new Set(prev);
      newSet.delete(imageSrc);
      return newSet;
    });
  };

  const showMessage = (type: 'success' | 'error', text: string) => {
    setMessage({ type, text });
    setTimeout(() => setMessage(null), 5000);
  };

  const copyImageUrl = (image: ImageData) => {
    navigator.clipboard.writeText(image.url || '');
    showMessage('success', 'URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  const downloadImage = (image: ImageData) => {
    const link = document.createElement('a');
    link.href = image.url || '';
    link.download = image.src;
    link.click();
  };

  const openImageInNewTab = (image: ImageData) => {
    window.open(image.url, '_blank');
  };

  const toggleImageSelection = (imageId: number) => {
    const newSelected = new Set(selectedImages);
    if (newSelected.has(imageId)) {
      newSelected.delete(imageId);
    } else {
      newSelected.add(imageId);
    }
    setSelectedImages(newSelected);
  };

  const filteredImages = images.filter(img =>
    img.alt.toLowerCase().includes(searchTerm.toLowerCase()) ||
    img.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    img.src.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-8">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-7xl w-full max-h-[95vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b bg-gray-50">
          <div>
            <h2 className="text-xl font-semibold text-gray-800">
              –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {pageTitle}
            </h2>
            <p className="text-sm text-gray-500">
              {images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Ä¢ {selectedImages.size} –≤—ã–±—Ä–∞–Ω–æ
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}
              className="p-2 text-gray-600 hover:bg-gray-200 rounded-lg transition-colors"
              title={viewMode === 'grid' ? '–°–ø–∏—Å–æ–∫' : '–°–µ—Ç–∫–∞'}
            >
              {viewMode === 'grid' ? <Eye size={20} /> : <EyeOff size={20} />}
            </button>
            <button
              onClick={loadImages}
              className="p-2 text-gray-600 hover:bg-gray-200 rounded-lg transition-colors"
              title="–û–±–Ω–æ–≤–∏—Ç—å"
            >
              <RefreshCw size={20} />
            </button>
            <button
              onClick={onClose}
              className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Message */}
        <AnimatePresence>
          {message && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className={`mx-6 mt-4 p-4 rounded-lg flex items-center ${
                message.type === 'success' 
                  ? 'bg-green-100 text-green-800 border border-green-200' 
                  : 'bg-red-100 text-red-800 border border-red-200'
              }`}
            >
              {message.type === 'success' ? (
                <CheckCircle className="w-5 h-5 mr-2" />
              ) : (
                <AlertCircle className="w-5 h-5 mr-2" />
              )}
              {message.text}
            </motion.div>
          )}
        </AnimatePresence>

        {/* Debug Info */}
        <div className="mx-6 mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h3 className="text-sm font-medium text-blue-800 mb-2">‚ÑπÔ∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º</h3>
          <div className="text-xs text-blue-700 space-y-1">
            <div>–†–µ–∂–∏–º: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ API)</div>
            <div>Backend URL: {backendUrl}</div>
            <div>Static URL: {backendUrl}/images/</div>
            <div>–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images.length}</div>
            <div>–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {imageErrors.size}</div>
          </div>
        </div>

        {/* Controls */}
        <div className="p-6 border-b bg-gray-50">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-4">
              <div className="relative">
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
                  className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              </div>
            </div>
            
            {selectedImages.size > 0 && (
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600">
                  –í—ã–±—Ä–∞–Ω–æ: {selectedImages.size}
                </span>
                <button
                  onClick={() => setSelectedImages(new Set())}
                  className="px-3 py-1 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 text-sm"
                >
                  –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Images Display */}
        <div className="p-6 overflow-y-auto max-h-[60vh]">
          {filteredImages.length > 0 ? (
            <div className={viewMode === 'grid' 
              ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" 
              : "space-y-4"
            }>
              {filteredImages.map((image) => (
                <motion.div
                  key={image.id}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className={`bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm ${
                    selectedImages.has(image.id) ? 'ring-2 ring-blue-500' : ''
                  } ${viewMode === 'list' ? 'flex' : ''}`}
                >
                  {/* Selection Checkbox */}
                  <div className="absolute top-2 left-2 z-10">
                    <input
                      type="checkbox"
                      checked={selectedImages.has(image.id)}
                      onChange={() => toggleImageSelection(image.id)}
                      className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500"
                    />
                  </div>

                  {/* Image Preview */}
                  <div className={`${viewMode === 'list' ? 'w-48 h-32' : 'aspect-video'} bg-gray-100 flex items-center justify-center relative`}>
                    <img
                      src={image.url}
                      alt={image.alt}
                      className="w-full h-auto object-contain"
                      onError={() => handleImageError(image.src)}
                      onLoad={() => handleImageLoad(image.src)}
                    />
                    
                    {imageErrors.has(image.src) && (
                      <div className="absolute inset-0 flex flex-col items-center justify-center text-red-400 bg-red-50">
                        <ImageIcon className="w-12 h-12 mb-2" />
                        <span className="text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</span>
                        <span className="text-xs text-center px-2">{image.src}</span>
                      </div>
                    )}
                  </div>

                  {/* Image Info */}
                  <div className={`p-4 ${viewMode === 'list' ? 'flex-1' : ''}`}>
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-gray-600">ID: {image.id}</span>
                      {image.size && (
                        <span className="text-xs text-gray-500">{image.size}</span>
                      )}
                    </div>
                    
                    <div className="space-y-2">
                      <div>
                        <span className="text-xs text-gray-500">Alt:</span>
                        <p className="text-sm text-gray-800 truncate">{image.alt}</p>
                      </div>
                      {image.title && (
                        <div>
                          <span className="text-xs text-gray-500">Title:</span>
                          <p className="text-sm text-gray-800 truncate">{image.title}</p>
                        </div>
                      )}
                      <div>
                        <span className="text-xs text-gray-500">Path:</span>
                        <p className="text-xs text-gray-600 truncate font-mono">{image.src}</p>
                      </div>
                      <div>
                        <span className="text-xs text-gray-500">URL:</span>
                        <p className="text-xs text-blue-600 truncate font-mono">{image.url}</p>
                      </div>
                    </div>

                    {/* Actions */}
                    <div className="flex items-center justify-between mt-4">
                      <div className="flex items-center space-x-1">
                        <button
                          onClick={() => openImageInNewTab(image)}
                          className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                          title="–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
                        >
                          <ExternalLink className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => copyImageUrl(image)}
                          className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                          title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL"
                        >
                          <Copy className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => downloadImage(image)}
                          className="p-2 text-purple-600 hover:bg-purple-50 rounded-lg transition-colors"
                          title="–°–∫–∞—á–∞—Ç—å"
                        >
                          <Download className="w-4 h-4" />
                        </button>
                      </div>
                      <div className="text-xs text-gray-500">
                        {imageErrors.has(image.src) ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' : 'OK'}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <ImageIcon className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {searchTerm ? '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'}
              </h3>
              <p className="text-gray-500 mb-4">
                {searchTerm 
                  ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
                  : '–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
                }
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}




